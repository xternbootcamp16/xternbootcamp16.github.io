<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Week7s on Xtern Bootcamp 16</title>
    <link>http://replace-this-with-your-hugo-site.com/week7/</link>
    <description>Recent content in Week7s on Xtern Bootcamp 16</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Jul 2016 18:53:46 -0400</lastBuildDate>
    <atom:link href="http://replace-this-with-your-hugo-site.com/week7/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Wrapping up Meganote</title>
      <link>http://replace-this-with-your-hugo-site.com/week7/</link>
      <pubDate>Mon, 11 Jul 2016 18:53:46 -0400</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/week7/</guid>
      <description>

&lt;h3 id=&#34;week-7&#34;&gt;Week 7&lt;/h3&gt;

&lt;h1 id=&#34;wrapping-up-meganote&#34;&gt;Wrapping up Meganote&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Day 29: More User Authentication</title>
      <link>http://replace-this-with-your-hugo-site.com/week7/day29/</link>
      <pubDate>Mon, 11 Jul 2016 19:00:12 -0400</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/week7/day29/</guid>
      <description>

&lt;p&gt;&lt;date&gt;Monday, July 11, 2016&lt;/date&gt;&lt;/p&gt;

&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;

&lt;h3 id=&#34;bcrypt&#34;&gt;bcrypt&lt;/h3&gt;

&lt;p&gt;We used &lt;code&gt;bcryptjs&lt;/code&gt; to hash user passwords before storing them in the database for security.  We can also use it to verify that the hash of an incoming plain-text password matches the stored hash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Synchronous password checking
bcrypt.compareSync(&#39;password_string&#39;, stored_password_hash);

// Async password checking
bcrypt.compare(&#39;password_string&#39;, stored_password_hash, (err, res) =&amp;gt; {
  // returns true if password is correct
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mongoose&#34;&gt;Mongoose&lt;/h3&gt;

&lt;p&gt;In Mongoose, instances of Models are known as &lt;em&gt;documents&lt;/em&gt;.  They have many pre-defined instance methods.  Pre-defined instance methods can be overwritten if necessary, or new custom methods can be added.  We have now done both.&lt;/p&gt;

&lt;p&gt;First, we overwrote the existing &lt;code&gt;.toJSON()&lt;/code&gt; method to remove extraneous data from the returned user object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;userSchema.methods.toJSON = function() {
  var user = this.toObject();
  delete user.password;
  delete user.__v;
  return user;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later, we wrote a custom &lt;code&gt;.authenticate()&lt;/code&gt; method for checking to make sure the password was correct before logging in a user.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;userSchema.methods.authenticate = function(password, callback) {
  bcrypt.compare(password, this.passwordDigest, (err, isMatch) =&amp;gt; {
    callback(isMatch);
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;projects&#34;&gt;Projects&lt;/h2&gt;

&lt;p&gt;Meganote:  &lt;a href=&#34;https://github.com/xternbootcamp16/meganote/tree/789d560d632e6da1afcca0c5659e9aa0761ac026&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meganote-server: &lt;a href=&#34;https://github.com/xternbootcamp16/meganote-server/tree/5c622f60cbb7979da752ce66f9ef3898dcad40fb&#34;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;homework&#34;&gt;Homework&lt;/h2&gt;

&lt;p&gt;Show flash messages for the success or failure of &amp;lsquo;sign up&amp;rsquo; and &amp;lsquo;log in&amp;rsquo;&lt;/p&gt;

&lt;p&gt;In Meganote Server, re-write the route for logging in using promises&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 30: Authentication with JWT</title>
      <link>http://replace-this-with-your-hugo-site.com/week7/day30/</link>
      <pubDate>Tue, 12 Jul 2016 15:22:54 -0400</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/week7/day30/</guid>
      <description>

&lt;p&gt;&lt;date&gt;Tuesday, July 12, 2016&lt;/date&gt;&lt;/p&gt;

&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;

&lt;h3 id=&#34;json-web-tokens&#34;&gt;JSON Web Tokens&lt;/h3&gt;

&lt;p&gt;JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object.&lt;/p&gt;

&lt;p&gt;JWTs are composed of three base-64 strings that are joined together with dot notation.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xxxxxxxxxx.yyyyyyyyyyy.zzzzzzzzz&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first component is the &lt;em&gt;header&lt;/em&gt;, which contains information about the type of token and the hashing algorithm used to create it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// decoded header
{
  &amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;,
  &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second component is the &lt;em&gt;payload&lt;/em&gt;, which contains the actual information being sent.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// decoded payload
{
  &amp;quot;title&amp;quot;: &amp;quot;The greatest note ever&amp;quot;,
  &amp;quot;body_html&amp;quot;: &amp;quot;seriously, it is&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last component is the &lt;em&gt;signature&lt;/em&gt;.  To create it, you take the encoded header, encoded payload, specified hashing algorithm, a secret, and sign it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// method to create a signature
HMACSHA256(
  base64UrlEncode(header) + &amp;quot;.&amp;quot; + base64UrlEncode(payload),
  secret)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;advantages-of-jwts&#34;&gt;Advantages of JWTs&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Lightweight&lt;/li&gt;
&lt;li&gt;Self-contained&lt;/li&gt;
&lt;li&gt;Reduced database queries, since the token contains all of the required information about the user&lt;/li&gt;
&lt;li&gt;Because information can be signed, you can be confident that the sender is who they say they are, and that the information has not been tampered with&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;learn-more-about-json-web-tokens&#34;&gt;Learn more about JSON Web Tokens&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jwt.io/introduction/&#34;&gt;Introduction to JSON Web Tokens - jwt.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://scotch.io/tutorials/the-anatomy-of-a-json-web-token&#34;&gt;The Anatomy of a JSON Web Token - scotch.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jwt.io/&#34;&gt;JWT Debugger&lt;/a&gt; - a useful tool for interactively working with JWTs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;angular-interceptors&#34;&gt;Angular Interceptors&lt;/h3&gt;

&lt;p&gt;Interceptors are used any time it is desirable to intercept requests before they are handed to the server and responses before they are handed off to the application code. They are factories that are added to the &lt;code&gt;$httpProvider.interceptors&lt;/code&gt; array&lt;/p&gt;

&lt;p&gt;In Meganote, we used an interceptor to add JSON Web Tokens to the headers of requests being sent to our API&lt;/p&gt;

&lt;p&gt;Read more about interceptors &lt;a href=&#34;https://docs.angularjs.org/api/ng/service/$http&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;projects&#34;&gt;Projects&lt;/h2&gt;

&lt;p&gt;Meganote:  &lt;a href=&#34;https://github.com/xternbootcamp16/meganote/tree/f2a7deaec6389589ed82c512b5b862a1f53893a2&#34;&gt;Morning&lt;/a&gt; | &lt;a href=&#34;https://github.com/xternbootcamp16/meganote/tree/354ca8350988b43eb95cc695ed995cb52fcc3622&#34;&gt;Afternoon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meganote-server: &lt;a href=&#34;https://github.com/xternbootcamp16/meganote-server/tree/4b41f89775990101773b3957dc20438125669ca7&#34;&gt;Morning&lt;/a&gt; | &lt;a href=&#34;https://github.com/xternbootcamp16/meganote-server/tree/272530344fc593fcb4edff059160971c04a5425b&#34;&gt;Afternoon&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;homework&#34;&gt;Homework&lt;/h2&gt;

&lt;p&gt;Meganote polish!  Add final touches for a better user experience&lt;/p&gt;

&lt;h4 id=&#34;flash-messages&#34;&gt;Flash messages&lt;/h4&gt;

&lt;p&gt;Add flash messages for events like successfully signing in or out, reusing a username, non-matching passwords, etc&lt;/p&gt;

&lt;h4 id=&#34;better-error-messages-from-the-server&#34;&gt;Better error messages from the server&lt;/h4&gt;

&lt;p&gt;Enhance the returned JSON responses from the server for better communication with the user&lt;/p&gt;

&lt;h4 id=&#34;database-validation&#34;&gt;Database validation&lt;/h4&gt;

&lt;p&gt;Enforce database rules on the server side for things like unique usernames and password length&lt;/p&gt;

&lt;h4 id=&#34;super-mega-bonus-credit&#34;&gt;Super Mega Bonus Credit&lt;/h4&gt;

&lt;p&gt;Add a spinner animation that appears while waiting for responses from the API&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Day 32: Minification, Promises and ng-Resource</title>
      <link>http://replace-this-with-your-hugo-site.com/week7/day32/</link>
      <pubDate>Thu, 14 Jul 2016 14:49:51 -0400</pubDate>
      
      <guid>http://replace-this-with-your-hugo-site.com/week7/day32/</guid>
      <description>

&lt;p&gt;&lt;date&gt;Thursday, July 14, 2016&lt;/date&gt;&lt;/p&gt;

&lt;h2 id=&#34;topics&#34;&gt;Topics&lt;/h2&gt;

&lt;h3 id=&#34;minification&#34;&gt;Minification&lt;/h3&gt;

&lt;p&gt;Minification is the process of making code as compact as possible without changing its functionality.  Since a lot of the white space, new lines, descriptive names, comments, and sometimes even block delimiters are purely for human readability, much of it can be stripped out while remaining completely functional.&lt;/p&gt;

&lt;p&gt;This is particularly important for JavaScript, since it is served over an internet connection, and the size of the files can dramatically effect the time it takes to transfer the required files and ultimately render a page.  In our project, we used &lt;a href=&#34;https://www.npmjs.com/package/gulp-uglify&#34;&gt;gulp-uglify&lt;/a&gt; for minifying JavaScript, and &lt;a href=&#34;https://www.npmjs.com/package/gulp-clean-css&#34;&gt;gulp-clean-css&lt;/a&gt; to minify CSS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// regular code

var numberArray = [];
for (var i = 0; i &amp;lt; 20; i++ ) {
  numberArray[i] = i;
}

// minified code

var a=[];for(var i=0;i&amp;lt;20;i++){a[i]=i;}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;promises&#34;&gt;Promises&lt;/h3&gt;

&lt;p&gt;Promises provide an easy-to-use interface for handling asynchronous tasks without blocking execution while waiting for the async task to complete.  Previously, this type of work was done using callback functions, but nested callbacks can quickly become very difficult to manage (and even read).&lt;/p&gt;

&lt;p&gt;Luckily, ES6 now provides native support for promises, so we no longer have to bring in an external promise library to take advantage of them. Basically, promises allow us to use &lt;code&gt;.then()&lt;/code&gt; functions to write what we would &lt;em&gt;like to do&lt;/em&gt; if the promises resolve successfully, and &lt;code&gt;.catch()&lt;/code&gt; to handle what happens if an error occurs and we don&amp;rsquo;t get the data we expect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;
// make a promise
let samplePromise = new Promise((resolve, reject) =&amp;gt; {
  if ( /* everything works as we expect */ ) {
    resolve(&#39;Great success!&#39;)
  } else {
    reject(&#39;That did not work...&#39;)
  }
})

// use the promise
samplePromise
  .then(result =&amp;gt; {
    console.log(result); // &#39;Great success!&#39;
  })
  .catch(err =&amp;gt; {
    console.log(err); // &#39;That did not work...&#39;
  });

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another great thing about promises is that they can be chained together - multiple &lt;code&gt;.then()&lt;/code&gt; functions can happen sequentially, with each &lt;code&gt;.then()&lt;/code&gt; depending on the successful return of the promise before it.  An error at any point of the chain propagates through the entire chain, so only one &lt;code&gt;.catch()&lt;/code&gt; is needed to handle multiple possible errors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// chained promises
firstPromise
  .then(firstResult =&amp;gt; {
    return secondThingThatReturnsAPromise(firstResult);
  })
  .then(secondResult =&amp;gt; {
    return thirdThingThatReturnsAPromise(secondResult);
  })
  .then(thirdResult =&amp;gt; {
    // do something with thirdResult
  })
  .catch(err =&amp;gt; {
    // catches any error from any of the previous promises
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;resources-for-learning-more-about-promises&#34;&gt;Resources for learning more about Promises&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://promisesaplus.com/&#34;&gt;Promises/A+&lt;/a&gt; - the actual specification&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://davidwalsh.name/promises&#34;&gt;JavaScript Promise API&lt;/a&gt; - a helpful article about the basics of promises by David Walsh&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/en/tutorials/es6/promises/&#34;&gt;JavaScript Promises: There and Back Again&lt;/a&gt; - A bit more in-depth look by Jake Archibald&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ngresource-https-docs-angularjs-org-api-ngresource-service-resource&#34;&gt;&lt;a href=&#34;https://docs.angularjs.org/api/ngResource/service/$resource&#34;&gt;ngResource&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ngResource&lt;/code&gt; is an Angular module that provides interaction support with RESTful services through the &lt;code&gt;$resource&lt;/code&gt; service (it&amp;rsquo;s a factory). By default, &lt;code&gt;$resource&lt;/code&gt; provides support for the following actions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{ &#39;get&#39;:    {method:&#39;GET&#39;},
  &#39;save&#39;:   {method:&#39;POST&#39;},
  &#39;query&#39;:  {method:&#39;GET&#39;, isArray:true},
  &#39;remove&#39;: {method:&#39;DELETE&#39;},
  &#39;delete&#39;: {method:&#39;DELETE&#39;} };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Custom actions can be added when the resource is created by passing additional parameters.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$resource(url, [paramDefaults], [actions], options);&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;homework&#34;&gt;Homework&lt;/h2&gt;

&lt;p&gt;Create your own Angular app from scratch that utilizes &lt;code&gt;$resource&lt;/code&gt; to interact with data from an API&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>App-meganotes on Xtern Bootcamp 16</title>
    <link>http://bootcamp16.getfretless.com/app-meganote/index.xml</link>
    <description>Recent content in App-meganotes on Xtern Bootcamp 16</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jun 2016 21:34:12 -0400</lastBuildDate>
    <atom:link href="http://bootcamp16.getfretless.com/app-meganote/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Meganote</title>
      <link>http://bootcamp16.getfretless.com/app-meganote/</link>
      <pubDate>Tue, 14 Jun 2016 21:34:12 -0400</pubDate>
      
      <guid>http://bootcamp16.getfretless.com/app-meganote/</guid>
      <description>

&lt;h3 id=&#34;angular&#34;&gt;Angular&lt;/h3&gt;

&lt;h1 id=&#34;meganote&#34;&gt;Meganote&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Meganote-Seed</title>
      <link>http://bootcamp16.getfretless.com/app-meganote/01-seed/</link>
      <pubDate>Tue, 14 Jun 2016 21:56:25 -0400</pubDate>
      
      <guid>http://bootcamp16.getfretless.com/app-meganote/01-seed/</guid>
      <description>

&lt;h2 id=&#34;clone-the-meganote-seed-https-github-com-xternbootcamp16-meganote-seed-project&#34;&gt;Clone the &lt;a href=&#34;https://github.com/xternbootcamp16/meganote-seed&#34;&gt;meganote-seed&lt;/a&gt; project&lt;/h2&gt;

&lt;p&gt;Clone the seed project in a local folder named &lt;code&gt;meganote&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git clone git@github.com:xternbootcamp16/meganote-seed.git meganote
cd meganote
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;remove-its-git-history-and-initialize-your-own-git-repository&#34;&gt;Remove its &lt;code&gt;.git&lt;/code&gt; history, and initialize your own git repository&lt;/h2&gt;

&lt;p&gt;Open the project in Atom and delete the &lt;code&gt;.git&lt;/code&gt; folder to remove all traces of the seed project&amp;rsquo;s repository.&lt;/p&gt;

&lt;p&gt;Then initialize your own repository.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git init
git add .
git commit -m &amp;quot;Initial commit using meganote-seed&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;note-about-commit-messages&#34;&gt;Note About Commit Messages&lt;/h3&gt;

&lt;p&gt;If you fail to specify a commit message, git will open a text editor for you to write the message manually. By default, it opens &lt;code&gt;vim&lt;/code&gt;, a powerful, but sometimes confusing terminal-based text editor.&lt;/p&gt;

&lt;p&gt;To configure Git to use Atom instead, type the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git config --global core.editor &amp;quot;atom --wait&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-github-repo&#34;&gt;Create a GitHub repo&lt;/h2&gt;

&lt;p&gt;Create a new repository in your GitHub account. Follow the instructions to add this repo as a remote for your local project, and push to that remote.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git remote add origin git@github.com:[YOUR GITHUB USERNAME]/meganote.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>http://bootcamp16.getfretless.com/app-meganote/02-setup/</link>
      <pubDate>Tue, 14 Jun 2016 22:45:03 -0400</pubDate>
      
      <guid>http://bootcamp16.getfretless.com/app-meganote/02-setup/</guid>
      <description>

&lt;h2 id=&#34;angular-seed&#34;&gt;Angular-seed&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular/angular-seed&#34;&gt;Angular-seed&lt;/a&gt; is a bootstrapping project preconfigured to with a suite of tools to make it easy to manage dependencies—including Angular itself—with a directory structure that works well for Angular apps. You could always start a new Angular app from scratch, but using the official seed project is a good idea.&lt;/p&gt;

&lt;p&gt;Angular-seed can be a bit overwhelming, because it includes an awful lot of stuff. We&amp;rsquo;ll use our own, considerably simpler seed project, &lt;code&gt;meganote-seed&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;meganote-seed-structure&#34;&gt;Meganote-seed structure&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the generated application structure, and what all the pieces are for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├── LICENSE             --&amp;gt; the MIT license agreement
├── app                 --&amp;gt; all of the source files for the application
│   ├── app.js          --&amp;gt; main application module
│   ├── content         --&amp;gt; static assets, like stylesheets and images
│   │   └── app.css     --&amp;gt; main stylesheet
│   ├── index.html      --&amp;gt; main HTML template for the app
│   └── notes           --&amp;gt; view template and logic for _notes_
│       └── notes.html  --&amp;gt; view template for _notes_
├── bower.json          --&amp;gt; client side dependencies (for `bower install`)
└── package.json        --&amp;gt; development and server side dependencies (for `npm install`)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;npm-package-json-and-bower-bower-json&#34;&gt;NPM (&lt;code&gt;package.json&lt;/code&gt;) and Bower (&lt;code&gt;bower.json&lt;/code&gt;)&lt;/h2&gt;

&lt;p&gt;Starting with non-empty &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;bower.json&lt;/code&gt; files is one of the handiest aspects of starting from a &lt;em&gt;seed&lt;/em&gt; project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;bower.json&lt;/code&gt; serve much the same purpose in a JavaScript project as the &lt;code&gt;Gemfile&lt;/code&gt; in a Ruby project (and a bit like the &lt;code&gt;Rakefile&lt;/code&gt; as well).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt; and &lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt; are both package managers. Package managers make the distribution and installation of software dramatically easier than alternative methods. Sometimes we need to reuse the same chunk of code in multiple projects. Sometimes our coworkers need to use software we&amp;rsquo;ve written for a previous project in a new project. Sometimes we want to share something we&amp;rsquo;ve written with the world. In cases like these, using a package manager can simplify including external dependencies and keeping them up-to-date.&lt;/p&gt;

&lt;p&gt;NPM, a package manager based on Node, is the most common package management system in the JavaScript world. NPM dependencies and scripts for a project are specified in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Bower is also extremely common and serves a subtly different purpose. Its dependencies and scripts are specified in &lt;code&gt;bower.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Like other package managers, NPM and Bower provide a standardized structure that we can use to package and distribute software we&amp;rsquo;ve written.&lt;/p&gt;

&lt;p&gt;Why do we need two package managers in our project? Why can&amp;rsquo;t we use &lt;em&gt;either&lt;/em&gt; npm or bower, rather than both? npm is ideally suited for managing server-side Node packages and development dependencies—like development-friendly web servers, minification tools, etc.—while Bower is designed for the client side.&lt;/p&gt;

&lt;p&gt;The biggest technical difference is that npm handles nested dependencies, while Bower leaves that up to us (which is appropriate for the client side, where we don&amp;rsquo;t want, for example, 5 different versions of jQuery sent to end users).&lt;/p&gt;

&lt;h2 id=&#34;npm-start&#34;&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;We can run a task from the command line called &lt;code&gt;npm start&lt;/code&gt;, because the &lt;code&gt;start&lt;/code&gt; script is defined in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &amp;quot;start&amp;quot;: &amp;quot;http-server app -a 0.0.0.0 -p 8000 -c-1&amp;quot;,
  &amp;quot;prestart&amp;quot;: &amp;quot;npm install&amp;quot;,
  &amp;quot;postinstall&amp;quot;: &amp;quot;bower install&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that &lt;code&gt;start&lt;/code&gt; script fires up a web server, serving the project&amp;rsquo;s &lt;code&gt;app&lt;/code&gt; directory, on port &lt;code&gt;8000&lt;/code&gt;. The &lt;code&gt;prestart&lt;/code&gt; script will automatically execute &lt;code&gt;npm start&lt;/code&gt; before the &lt;code&gt;start&lt;/code&gt; script itself. Similarly, the &lt;code&gt;postinstall&lt;/code&gt; script will automatically execute &lt;code&gt;bower install&lt;/code&gt; as soon as &lt;code&gt;npm install&lt;/code&gt; finishes.&lt;/p&gt;

&lt;p&gt;All told, running the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will execute the following commands, in this order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;npm install
bower install
http-server app -a 0.0.0.0 -p 8000 -c-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go ahead and run &lt;code&gt;npm start&lt;/code&gt; now.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll see the &lt;code&gt;node_modules&lt;/code&gt; and &lt;code&gt;app/bower_components&lt;/code&gt; directories are added to your project with all the installed dependencies. Don&amp;rsquo;t worry about it adding bloat to your repository. Just like the bundled gems in a Ruby project, &lt;code&gt;node_modules&lt;/code&gt; and &lt;code&gt;bower_components&lt;/code&gt; are in &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don&amp;rsquo;t want other developers on the project to have to re-download the dependencies from the web, you can include the two directories in your repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dependencies are versioned, so if you were to change the version number, and run &lt;code&gt;npm install&lt;/code&gt; again, bower will get the correct version of whatever dependency we need.&lt;/p&gt;

&lt;p&gt;If npm and bower have finished installing dependencies, the output of &lt;code&gt;npm start&lt;/code&gt; should end with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;Starting up http-server, serving app on port: 8000
Hit CTRL-C to stop the server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visit &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt; in your web browser.&lt;/p&gt;

&lt;p&gt;Hopefully you see something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Meganote

Welcome to Meganote!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If so, let&amp;rsquo;s keep moving.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Fonts</title>
      <link>http://bootcamp16.getfretless.com/app-meganote/03-google-fonts/</link>
      <pubDate>Wed, 15 Jun 2016 09:05:23 -0400</pubDate>
      
      <guid>http://bootcamp16.getfretless.com/app-meganote/03-google-fonts/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s add a pair of fonts from Google to our project. Rather than actually add the font files directly to our project, we&amp;rsquo;ll just hotlink the necessary files from a CDN (Content Delivery Network), since Google so graciously provides one.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href=&#34;https://fonts.google.com/&#34;&gt;Google Fonts&lt;/a&gt; and browse through some of the selections there. You can try each typeface out right on the page. When you find one you like, click the &lt;i class=&#34;fa fa-plus-circle gf-red&#34; aria-hidden=&#34;true&#34; title=&#34;plus&#34;&gt;&lt;/i&gt; &lt;span class=&#34;sr-only&#34;&gt;&lt;em&gt;plus&lt;/em&gt;&lt;/span&gt; button.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll see a box with &lt;em&gt;1 Family Selected&lt;/em&gt; appear at the bottom of the screen. Click that to pull up the details for that typeface. You&amp;rsquo;ll see the embed code right away—the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag that you should add to the head of your HTML.&lt;/p&gt;

&lt;p&gt;This will be the link for only one style of the typeface in order to keep the download small, and thus &lt;em&gt;fast&lt;/em&gt;. You may need to add a bold or italic variant, in which case switch to the &lt;span class=&#34;gf-tab&#34;&gt;Customize&lt;/span&gt; tab and select additional styles. When you&amp;rsquo;re finished, switch back to the &lt;span class=&#34;gf-tab&#34;&gt;Embed&lt;/span&gt; tab and grab the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag to embed.&lt;/p&gt;

&lt;p&gt;For Meganote, I&amp;rsquo;ve picked out one &lt;a href=&#34;https://en.wikipedia.org/wiki/Serif&#34;&gt;serif&lt;/a&gt; font and one sans-serif font: Merriweather and Oxygen, respectively.&lt;/p&gt;

&lt;p&gt;Add the stylesheet link just above &lt;code&gt;app.css&lt;/code&gt; in the header of the index page.&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;app/index.html&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://fonts.googleapis.com/css?family=Merriweather:400,300,300italic|Oxygen:400,300,700&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, add the following rule to the top of &lt;code&gt;app.css&lt;/code&gt; itself, just to make sure the font link worked.&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;app/app.css&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  font-family: &#39;Merriweather&#39;;
  font-size: 1.5em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you refresh, the body text should appear in a lovely serif font.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s commit:&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;shell&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git add .
git commit -m &amp;quot;Add Merriweather and Oxygen fonts from Google.&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Bootstrap</title>
      <link>http://bootcamp16.getfretless.com/app-meganote/04-bootstrap/</link>
      <pubDate>Wed, 15 Jun 2016 15:19:00 -0400</pubDate>
      
      <guid>http://bootcamp16.getfretless.com/app-meganote/04-bootstrap/</guid>
      <description>&lt;p&gt;Now that we&amp;rsquo;ve committed our basic, empty project, let&amp;rsquo;s add &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt; to bring some basic structure and mobile-friendly features to our HTML and CSS.&lt;/p&gt;

&lt;p&gt;We could download all the bootstrap components manually and include them our project, but we&amp;rsquo;ve used some &lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt; power to do it for us.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get some info about Bower&amp;rsquo;s Bootstrap package.&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;shell&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;node_modules/.bin/bower info bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows us a bunch of details about that package, including available versions, the exact name of the package (it&amp;rsquo;s just &lt;em&gt;bootstrap&lt;/em&gt;), and its dependencies. If we install Bootstrap in our project, its dependencies will automatically be installed with it.&lt;/p&gt;

&lt;p&gt;To include Bootstrap in our project, we need to list Bootstrap among our dependencies in &lt;code&gt;bower.json&lt;/code&gt;. The &lt;em&gt;meganote-seed&lt;/em&gt; project already included it.&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;bower.json&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    &amp;quot;bootstrap&amp;quot;: &amp;quot;3.3.6&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Had we just added it, we would need to run &lt;code&gt;bower install&lt;/code&gt; again to actually add the files to our project. Running &lt;code&gt;npm install&lt;/code&gt; will kick of &lt;code&gt;bower install&lt;/code&gt; for us, as will just starting up our server with &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We still need to include Bootstrap&amp;rsquo;s JavaScript and CSS to our app&amp;rsquo;s home page. Open &lt;code&gt;app/index.html&lt;/code&gt;, and add the Bootstrap stylesheets and scripts.&lt;/p&gt;

&lt;p&gt;Add Bootstrap&amp;rsquo;s stylesheet just above &lt;code&gt;app.css&lt;/code&gt;, and add the JavaScript just above the other &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags near the bottom of the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;app/index.html&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;...
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;bower_components/bootstrap/dist/css/bootstrap.min.css&amp;quot;&amp;gt;
  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;app.css&amp;quot;&amp;gt;
...
  &amp;lt;script src=&amp;quot;bower_components/jquery/dist/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;bower_components/bootstrap/dist/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you ever need to update a dependency, all you should need to do is issue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;./node_modules/.bin/bower update bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it will update &lt;code&gt;bower.json&lt;/code&gt; for you and install the new packages. Provided the paths to assets don&amp;rsquo;t change, you shouldn&amp;rsquo;t need to update your &lt;code&gt;index.html&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; By including &lt;code&gt;./node_modules/bin/&lt;/code&gt; in that command, we ensure that we are running the version of Bower that&amp;rsquo;s installed in this app. You can omit the path if you have Bower installed globally, which you can do with &lt;code&gt;npm install -g bower&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;If you save and refresh the page, you should see some padding that wasn&amp;rsquo;t there before, as well as a change in font sizes.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s add everything we&amp;rsquo;ve done so far to git and commit again:&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;shell&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git add .
git commit -m &amp;quot;Add Bootstrap.&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NotesController</title>
      <link>http://bootcamp16.getfretless.com/app-meganote/07-notescontroller/</link>
      <pubDate>Wed, 15 Jun 2016 19:53:04 -0400</pubDate>
      
      <guid>http://bootcamp16.getfretless.com/app-meganote/07-notescontroller/</guid>
      <description>&lt;p&gt;Inject a dependency for the &lt;code&gt;Notes&lt;/code&gt; module/controller that we&amp;rsquo;ll soon create, and update the catch-all route:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app/app.js&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;angular.module(&#39;meganote&#39;, [
...
  &#39;meganote.version&#39;,
  &#39;meganote.notes&#39;
...
  $routeProvider.otherwise({redirectTo: &#39;/notes&#39;});
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make a new directory for our new module, &lt;code&gt;app/notes&lt;/code&gt;, and add a file named &lt;code&gt;notes.js&lt;/code&gt; under it:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app/notes/notes.js&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;

angular.module(&#39;meganote.notes&#39;, [&#39;ngRoute&#39;])

.config([&#39;$routeProvider&#39;, function($routeProvider) {
  $routeProvider.when(&#39;/notes&#39;, {
    templateUrl: &#39;notes/notes.html&#39;,
    controller: &#39;NotesController&#39;
  });
}])

.controller(&#39;NotesController&#39;, [function() {

}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a file &lt;code&gt;app/notes/notes.html&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app/notes/notes.html&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;Welcome to Meganote.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifying the dependencies to AngularJS is not sufficient to actually get those scripts sent to browsers. We must require the notes controller in &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app/index.html&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;  &amp;lt;script src=&amp;quot;notes/notes.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if you visit the root url (&lt;a href=&#34;http://localhost:8000/&#34;&gt;http://localhost:8000/&lt;/a&gt;), you should be taken to &lt;code&gt;/notes&lt;/code&gt; and see the welcome message from &lt;code&gt;app/notes/notes.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Commit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Layout &amp; Style</title>
      <link>http://bootcamp16.getfretless.com/app-meganote/05-layout/</link>
      <pubDate>Wed, 15 Jun 2016 15:39:05 -0400</pubDate>
      
      <guid>http://bootcamp16.getfretless.com/app-meganote/05-layout/</guid>
      <description>&lt;p&gt;Now that we have Bootstrap and font stuff in place, let&amp;rsquo;s start to make this look like a real app.&lt;/p&gt;

&lt;p&gt;Our app content gets inserted inside &lt;code&gt;&amp;lt;div ui-view&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; (more on that later), so we&amp;rsquo;ll put some basic structure around that using Bootstrap&amp;rsquo;s grid system.&lt;/p&gt;

&lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;Read all about &lt;a href=&#34;http://getbootstrap.com/css/#grid&#34;&gt;Bootstrap&amp;rsquo;s grid system&lt;/a&gt; in the official documentation for &lt;a href=&#34;http://getbootstrap.com/css/&#34;&gt;Bootstrap&amp;rsquo;s CSS&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;When we&amp;rsquo;re done, our &lt;code&gt;index.html&lt;/code&gt; should look like this:&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;app/index.html&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!--[if lt IE 7]&amp;gt;      &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&amp;quot;meganote&amp;quot; class=&amp;quot;no-js lt-ie9 lt-ie8 lt-ie7&amp;quot;&amp;gt; &amp;lt;![endif]--&amp;gt;
&amp;lt;!--[if IE 7]&amp;gt;         &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&amp;quot;meganote&amp;quot; class=&amp;quot;no-js lt-ie9 lt-ie8&amp;quot;&amp;gt; &amp;lt;![endif]--&amp;gt;
&amp;lt;!--[if IE 8]&amp;gt;         &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&amp;quot;meganote&amp;quot; class=&amp;quot;no-js lt-ie9&amp;quot;&amp;gt; &amp;lt;![endif]--&amp;gt;
&amp;lt;!--[if gt IE 8]&amp;gt;&amp;lt;!--&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot; ng-app=&amp;quot;meganote&amp;quot; class=&amp;quot;no-js&amp;quot;&amp;gt; &amp;lt;!--&amp;lt;![endif]--&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
    &amp;lt;title ng-bind=&amp;quot;$state.current.name + &#39; - Meganote&#39;&amp;quot;&amp;gt;Meganote&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://fonts.googleapis.com/css?family=Merriweather:400,300,300italic|Oxygen:400,300,700&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;bower_components/bootstrap/dist/css/bootstrap.css&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;/content/app.css&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;

    &amp;lt;div class=&amp;quot;container wrap&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;col-xs-12&amp;quot;&amp;gt;
          &amp;lt;header&amp;gt;
            &amp;lt;div class=&amp;quot;well&amp;quot;&amp;gt;
              Meganote
            &amp;lt;/div&amp;gt;
          &amp;lt;/header&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div ui-view&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;


    &amp;lt;script src=&amp;quot;bower_components/jquery/dist/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;bower_components/bootstrap/dist/js/bootstrap.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;bower_components/angular-loader/angular-loader.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;bower_components/angular/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;bower_components/angular-ui-router/release/angular-ui-router.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now update &lt;code&gt;app.css&lt;/code&gt; with some nice styles:&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;app/content/app.css&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body {
  font-family: Oxygen, Helvetica, Arial, sans-serif; }

h1, h2, h3, h4, h5 {
font-family: Merriweather;
font-weight: 300;
color: #FE5F55; }

.container {
  width: 100% !important;
  padding-left: 0 !important;
  padding-right: 0 !important; }

.row {
  margin-left: 0 !important;
  margin-right: 0 !important; }

.col-xs-12 {
  padding-left: 0 !important;
  padding-right: 0 !important; }

header .well {
  padding-top: 5px;
  padding-bottom: 5px; }
  header .well .user-links {
    float: right;
    color: #ccc; }
    header .well .user-links a {
      cursor: pointer; }

a:link, a:visited, a:hover, a:active {
  color: #FE5F55; }

i.fa-trash-o {
  color: #ccc;
  font-size: 150%;
  vertical-align: middle;
  margin-left: 1em; }
  i.fa-trash-o:hover {
    color: #999; }

.wysihtml5-toolbar .btn-default {
  color: #999; }

input#note_title {
  border: none;
  font-size: 200%;
  font-family: Merriweather;
  color: #FE5F55;
  font-weight: 300;
  width: 100%; }
  input#note_title:focus {
    outline: none; }

ul#notes {
  list-style: none;
  margin-top: 1em;
  padding: 0;
  width: 100%;
  color: #999; }
  ul#notes li {
    border-top: 1px solid #ddd;
    height: 100px;
    font-size: 90%;
    cursor: pointer;
    overflow: hidden; }
    ul#notes li:first-of-type {
      border-top: none; }
    ul#notes li:hover {
      color: white;
      background-color: #FE5F55; }
      ul#notes li:hover .note-title {
        color: white; }
    ul#notes li .note-title {
      color: black;
      font-family: Merriweather;
      font-size: 120%;
      font-weight: 300; }
    ul#notes li .note-body {
      height: 54px;
      overflow: hidden; }
    ul#notes li a.note {
      display: block;
      height: 100px;
      padding: 1em;
      text-decoration: none; }
    ul#notes li a.note:hover {
      color: white; }

#new_user input[type=&amp;quot;text&amp;quot;],
#new_user input[type=&amp;quot;password&amp;quot;] {
  width: 300px;
  font-size: 120%;
  border-radius: 4px;
  border: 1px solid #ccc;
  padding: 0.25em; }

#welcome h1 {
  color: #FE5F55; }
#welcome main {
  margin: 0 auto;
  width: 360px; }

span.login {
  margin-left: 1em; }

.ta-editor {
  margin-top: 0.5em; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit your work:&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;shell&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;git add .
git commit -m &amp;quot;Add layout and styles&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Modules &amp; Routes</title>
      <link>http://bootcamp16.getfretless.com/app-meganote/06-modules-routes/</link>
      <pubDate>Wed, 15 Jun 2016 15:53:23 -0400</pubDate>
      
      <guid>http://bootcamp16.getfretless.com/app-meganote/06-modules-routes/</guid>
      <description>

&lt;p&gt;Wow. How have we gone this far without looking at &lt;code&gt;app.js&lt;/code&gt; in any real detail?&lt;/p&gt;

&lt;p&gt;&lt;p class=&#34;file&#34;&gt;app/app.js&lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function() {
  var app = angular.module(&#39;meganote&#39;, [
    &#39;ui.router&#39;
  ]);

  function config($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise(&#39;/notes&#39;);

    $stateProvider

      .state(&#39;notes&#39;, {
        url: &#39;/notes&#39;,
        template: &#39;&amp;lt;h1&amp;gt;Meganote&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt;&#39;,
        controller: function($scope) {
          $scope.message = &amp;quot;Welcome to Meganote!&amp;quot;;
        }
      });
  }

  config[&#39;$inject&#39;] = [&#39;$stateProvider&#39;, &#39;$urlRouterProvider&#39;];
  app.config(config);
})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s break it down.&lt;/p&gt;

&lt;h2 id=&#34;angular-module&#34;&gt;angular.module()&lt;/h2&gt;

&lt;p&gt;This file defines the main Angular module and routing instructions.&lt;/p&gt;

&lt;p&gt;The first argument to &lt;code&gt;angular.module&lt;/code&gt; is the name of the module, and the second argument is an array containing the &lt;em&gt;names&lt;/em&gt; of other modules that this one requires, as strings.&lt;/p&gt;

&lt;div class=&#34;notices tip&#34; &gt;&lt;p&gt;Without the second argument, you are &lt;em&gt;retrieving&lt;/em&gt; an existing module, rather than &lt;em&gt;creating&lt;/em&gt; one. Read more on &lt;a href=&#34;http://www.w3schools.com/angular/angular_modules.asp&#34;&gt;w3schools&lt;/a&gt; or &lt;a href=&#34;https://docs.angularjs.org/api/ng/function/angular.module&#34;&gt;the official &lt;code&gt;angular.module&lt;/code&gt; documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;!-- &lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;Read &lt;a href=&#34;http://anandmanisankar.com/posts/angularjs-dependency-injection-demystified/&#34;&gt;AngularJS Dependency Injection Demystified&lt;/a&gt; for more information, but rest assured that we&amp;rsquo;ll be coming back to this topic.&lt;/p&gt;
&lt;/div&gt;
 --&gt;

&lt;p&gt;The &lt;code&gt;meganote&lt;/code&gt; module is already setup to require the &lt;code&gt;ui-router&lt;/code&gt; module, which is also sourced with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in the layout.&lt;/p&gt;

&lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;Since this module represents our entire app, it is the one referenced by the &lt;code&gt;ng-app&lt;/code&gt; directive on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag in the layout.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;We&amp;rsquo;re saving the new module to a local variable called &lt;code&gt;app&lt;/code&gt;. Below that, we define a function named &lt;code&gt;config&lt;/code&gt; that, as its name suggests, will configure our module. This function has two parameters, &lt;code&gt;$stateProvider&lt;/code&gt; and &lt;code&gt;$urlRouterProvider&lt;/code&gt;, but of which are services in the UI-Router.&lt;/p&gt;

&lt;h2 id=&#34;ui-router&#34;&gt;UI-Router&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/angular-ui/ui-router/wiki&#34;&gt;UI-Router&lt;/a&gt; is one of several routing frameworks for Angular. Routing frameworks are responsible for managing the URLs in single-page applications like this one. Strictly speaking, we&amp;rsquo;ll always be on &lt;code&gt;index.html&lt;/code&gt;, but the URL will change as we click around in our app.&lt;/p&gt;

&lt;p&gt;UI-Router uses a &lt;a href=&#34;https://en.wikipedia.org/wiki/Finite-state_machine&#34;&gt;&lt;em&gt;state-machine&lt;/em&gt;&lt;/a&gt; to manage all of this, so we&amp;rsquo;ll define &lt;em&gt;states&lt;/em&gt; that map specific URLs to specific templates and controllers, as well to define some behavior.&lt;/p&gt;

&lt;div class=&#34;notices note&#34; &gt;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/angular-ui/ui-router&#34;&gt;UI-Router project page&lt;/a&gt; and the &lt;a href=&#34;https://github.com/angular-ui/ui-router/wiki&#34;&gt;In-Depth Guide&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;


&lt;h3 id=&#34;stateprovider&#34;&gt;$stateProvider&lt;/h3&gt;

&lt;p&gt;We use &lt;code&gt;$stateProvider&lt;/code&gt; to define states, which can be as simple as giving the state a name and a template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$stateProvider.state(&#39;mutants&#39;, {
  template: &#39;&amp;lt;h1&amp;gt;Behold, Ye Mutants!&amp;lt;/h1&amp;gt;&#39;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could then link to this state from our HTML, despite having not defined a URL for it. Most of the time, however, we will define a URL&amp;emdash;both for the sake of maintaining browser history (&lt;em&gt;i.e.&lt;/em&gt; preserving the behavior of the &lt;em&gt;back&lt;/em&gt; button), and to create direct links to individual resources.&lt;/p&gt;

&lt;p&gt;We go one step further and specify a &lt;em&gt;controller&lt;/em&gt; as well. The controller is a function that will run whenever this state is loaded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$stateProvider.state(&#39;notes&#39;, {
  url: &#39;/notes&#39;,
  template: &#39;&amp;lt;h1&amp;gt;Meganote&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;{{ message }}&amp;lt;/p&amp;gt;&#39;,
  controller: function($scope) {
    $scope.message = &amp;quot;Welcome to Meganote!&amp;quot;;
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;urlrouterprovider&#34;&gt;$urlRouterProvider&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://angular-ui.github.io/ui-router/site/#/api/ui.router.router.$urlRouterProvider&#34;&gt;&lt;code&gt;$urlRouterProvider&lt;/code&gt;&lt;/a&gt; watches for changes in the URL and looks for a state with a matching rule.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$urlRouterProvider.otherwise()&lt;/code&gt; lets us specify a path to use when no matching rule is found. For our app, a reasonable default would be a &lt;strong&gt;notes&lt;/strong&gt; page, hence &lt;code&gt;$urlRouterProvider.otherwise(&#39;/notes&#39;)&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>